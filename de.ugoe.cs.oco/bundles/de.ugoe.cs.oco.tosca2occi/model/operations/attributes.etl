/* Operation: setAttributeStates
Input: 
Description: */
operation OCCI!occi::Resource setAttributeStates(nodeTemplate: TOSCA!TNodeTemplate) {
		if(nodeTemplate.properties.isDefined()){
			for (propertyObject in nodeTemplate.properties.any){
				for (feature in propertyObject.value.eClass.eAllStructuralFeatures){
					var state = new OCCI!occi::AttributeState();
					state.name = feature.name;
					state.value = propertyObject.value.eGet(feature).toString();
					self.getAttributes.add(state);
				}
			}
		}
}

/* Operation: createAttributeStatesRecursive
Input:
Description: */
operation OCCI!occi::Resource createAttributeStatesRecursive(owner: String, content : Any, oldContent : Any) {
//not(content.value.mixed.value.hasProperty("mixed"))
	if(not(content.value.hasProperty("mixed"))) {
		
		//Newlines are detected as single elements in the Model and are filtered out
		if(not("\n".isSubstringOf(content.value))){	
			var attr = new OCCI!occi::AttributeState;	
			for(leafElement in content.value){
				if (propertyMapping.get(owner) == null){
					attr.name = oldContent.estructuralfeature.name;
				} else {
					attr.name = propertyMapping.get(owner).get(oldContent.estructuralfeature.name);
				}
				
				attr.value = content.value;
			}
			self.attributes.add(attr);
		}
	}
	else{
		for (nestedElement in content.value.mixed){
			self.createAttributeStatesRecursive(owner, nestedElement, content);
		}
	}
}

/* Operation: findAnyTypeElement
Input: String of AnyType element to search.
Return: Returns element containing the searched for AnyType.
Description: Returns feature containing the searched for AnyType.*/
operation findAnyTypeElement(name: String) : Any{
	if (not TOSCA!TypesType.all.isEmpty()){
		for (mixedcontent in TOSCA!TypesType.all.first().econtents.mixed){
			for (feature in mixedcontent){
				for(attribute in feature.value.anyAttribute){
					if(attribute.value.asString() == name){
						return feature;
					}
				}
			}
		}
	}
}