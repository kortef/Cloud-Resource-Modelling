<?xml version="1.0" encoding="ASCII"?>
<tosca:Definitions xmlns:tosca="http://oco.cs.ugoe.de/tosca" xmlns:types="http://swe.simpaas.tosca.de/PropertyTypes">
  <tosca:Import location="http://www.getcloudify.org/spec/cloudify/4.0m10/types.yaml" namespace="types"/>
  <tosca:Import location="http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml" namespace="fabric_plugin"/>
  <tosca:Import location="http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml" namespace="openstack_plugin"/>
  <tosca:Import location="http://user.informatik.uni-goettingen.de/~fglaser/cloudify-ansible-plugin/plugin.yaml" namespace="ansible_plugin"/>
  <tosca:NodeType name="mongoscale.host">
    <tosca:DerivedFrom typeRef="cloudify.openstack.nodes.Server"/>
  </tosca:NodeType>
  <tosca:NodeType name="ansible.nodes.Application">
    <tosca:DerivedFrom typeRef="cloudify.nodes.ApplicationModule"/>
    <tosca:Interfaces>
      <tosca:Interface name="cloudify.interfaces.lifecycle">
        <tosca:Operation name="start" implementation="ansible.ansible_plugin.tasks.ansible_playbook"/>
        <tosca:Operation name="configure" implementation="ansible.ansible_plugin.tasks.configure"/>
      </tosca:Interface>
    </tosca:Interfaces>
  </tosca:NodeType>
  <tosca:ServiceTemplate>
    <tosca:TopologyTemplate>
      <tosca:RelationshipTemplate type="cloudify.relationships.contained_in">
        <tosca:SourceElement ref="mongoscale.apps.shardapp"/>
        <tosca:TargetElement ref="mongoscale.hosts.shardhost"/>
      </tosca:RelationshipTemplate>
      <tosca:RelationshipTemplate type="cloudify.relationships.contained_in">
        <tosca:SourceElement ref="mongoscale.apps.router"/>
        <tosca:TargetElement ref="mongoscale.hosts.router"/>
      </tosca:RelationshipTemplate>
      <tosca:RelationshipTemplate type="cloudify.openstack.server_connected_to_floating_ip">
        <tosca:SourceElement ref="mongoscale.hosts.router"/>
        <tosca:TargetElement ref="swe.simpaas.instances.floating_ip"/>
      </tosca:RelationshipTemplate>
      <tosca:RelationshipTemplate type="cloudify.openstack.server_connected_to_keypair">
        <tosca:SourceElement ref="mongoscale.hosts.router"/>
        <tosca:TargetElement ref="mongoscale-key"/>
      </tosca:RelationshipTemplate>
      <tosca:RelationshipTemplate type="cloudify.openstack.server_connected_to_keypair">
        <tosca:SourceElement ref="mongoscale.hosts.shardhost"/>
        <tosca:TargetElement ref="mongoscale-key"/>
      </tosca:RelationshipTemplate>
      <tosca:NodeTemplate type="cloudify.openstack.nodes.FloatingIP" name="swe.simpaas.instances.floating_ip">
        <tosca:Properties>
          <types:OpenStackFloatingIPPropertiesType>
            <types:openstack_config>{get_input: openstack_configuration}</types:openstack_config>
            <types:floatingip>
              <types:floating_network_name>provider</types:floating_network_name>
            </types:floatingip>
          </types:OpenStackFloatingIPPropertiesType>
        </tosca:Properties>
      </tosca:NodeTemplate>
      <tosca:NodeTemplate type="ansible.nodes.Application" name="mongoscale.apps.shardapp">
        <interfaces>
          <tosca:Interface name="cloudify.interfaces.lifecycle">
            <tosca:Operation name="start" implementation="ansible.ansible_plugin.tasks.ansible_playbook"/>
            <tosca:Operation name="configure" implementation="ansible.ansible_plugin.tasks.configure">
              <tosca:InputParameters>
                <tosca:InputParameter name="rolesfile" value="roles.zip"/>
                <tosca:InputParameter name="roles" value="[common, avahi, shard]"/>
                <tosca:InputParameter name="keypair" value="/root/.ssh/mongoscale-key.pem"/>
                <tosca:InputParameter name="private_ip_address" value="{get_attribute: [mongoscale.hosts.shardhost, ip]}"/>
                <tosca:InputParameter name="user" value="ubuntu"/>
              </tosca:InputParameters>
            </tosca:Operation>
          </tosca:Interface>
        </interfaces>
      </tosca:NodeTemplate>
      <tosca:NodeTemplate type="ansible.nodes.Application" name="mongoscale.apps.router">
        <interfaces>
          <tosca:Interface name="cloudify.interfaces.lifecycle">
            <tosca:Operation name="start" implementation="ansible.ansible_plugin.tasks.ansible_playbook"/>
            <tosca:Operation name="configure" implementation="ansible.ansible_plugin.tasks.configure">
              <tosca:InputParameters>
                <tosca:InputParameter name="rolesfile" value="roles.zip"/>
                <tosca:InputParameter name="roles" value="[common, avahi, configserver]"/>
                <tosca:InputParameter name="keypair" value="/root/.ssh/mongoscale-key.pem"/>
                <tosca:InputParameter name="private_ip_address" value="{get_attribute: [mongoscale.hosts.router, ip]}"/>
                <tosca:InputParameter name="user" value="ubuntu"/>
              </tosca:InputParameters>
            </tosca:Operation>
          </tosca:Interface>
        </interfaces>
      </tosca:NodeTemplate>
      <tosca:NodeTemplate type="mongoscale.host" name="mongoscale.hosts.router">
        <tosca:Properties>
          <types:HostPropertiesType>
            <types:openstack_config>{get_input: openstack_configuration}</types:openstack_config>
            <types:management_network_name>mongodb-network</types:management_network_name>
            <types:agent_config>{get_input: agent_configuration}</types:agent_config>
            <types:server>
              <types:image>adf63ddc-debe-4d7e-b899-b936e989439f</types:image>
              <types:flavor>{get_input: vm_flavor}</types:flavor>
              <types:name>router</types:name>
            </types:server>
          </types:HostPropertiesType>
        </tosca:Properties>
      </tosca:NodeTemplate>
      <tosca:NodeTemplate type="cloudify.openstack.nodes.KeyPair" name="mongoscale-key">
        <tosca:Properties>
          <types:KeyPairPropertiesType>
            <types:openstack_config>{get_input: openstack_configuration}</types:openstack_config>
            <types:use_external_resource>false</types:use_external_resource>
            <types:resource_id>mongoscale_key</types:resource_id>
            <types:private_key_path>~/.ssh/mongoscale-key.pem</types:private_key_path>
          </types:KeyPairPropertiesType>
        </tosca:Properties>
      </tosca:NodeTemplate>
      <tosca:NodeTemplate type="mongoscale.host" name="mongoscale.hosts.shardhost">
        <tosca:Properties>
          <types:HostPropertiesType>
            <types:openstack_config>{get_input: openstack_configuration}</types:openstack_config>
            <types:management_network_name>mongodb-network</types:management_network_name>
            <types:agent_config>{get_input: agent_configuration}</types:agent_config>
            <types:server>
              <types:image>adf63ddc-debe-4d7e-b899-b936e989439f</types:image>
              <types:flavor>{get_input: vm_flavor}</types:flavor>
              <types:name>sh1rep1</types:name>
            </types:server>
          </types:HostPropertiesType>
        </tosca:Properties>
      </tosca:NodeTemplate>
      <tosca:GroupTemplate type="swe.simpaas.groups.ScalingGroup" name="mongoscale.groups.shard">
        <tosca:Properties>
          <types:ScalingGroupPropertiesType>
            <types:scale>
              <types:instances>{get_input: num_shards}</types:instances>
            </types:scale>
          </types:ScalingGroupPropertiesType>
        </tosca:Properties>
        <tosca:Member>mongoscale.groups.replica</tosca:Member>
      </tosca:GroupTemplate>
      <tosca:GroupTemplate type="swe.simpaas.groups.ScalingGroup" name="mongoscale.groups.replica">
        <tosca:Properties>
          <types:ScalingGroupPropertiesType>
            <types:scale>
              <types:instances>{get_input: num_replicas}</types:instances>
            </types:scale>
          </types:ScalingGroupPropertiesType>
        </tosca:Properties>
        <tosca:Member>mongoscale.hosts.shardhost</tosca:Member>
        <tosca:Member>mongoscale.apps.shardapp</tosca:Member>
      </tosca:GroupTemplate>
    </tosca:TopologyTemplate>
    <tosca:Plans>
      <tosca:Plan name="database_endpoint">
        <tosca:InputParameters>
          <tosca:InputParameter name="keystone_password" defaultValue="eCzA2017"/>
          <tosca:InputParameter name="openstack_configuration" defaultValue="{password: {get_input: keystone_password}, tenant_name: {get_input: keystone_tenant_name}, neutron_url: {get_input: neutron_url}, nova_url: {get_input: nova_url}, auth_url: {get_input: keystone_url}, region: {get_input: region}, username: {get_input: keystone_username}}"/>
          <tosca:InputParameter name="neutron_url" defaultValue="http://controller:9696"/>
          <tosca:InputParameter name="nova_url" defaultValue="http://controller:8774/v2.1/26cfd525f5634c98ac3bf99fe906fb71"/>
          <tosca:InputParameter name="keystone_username" defaultValue="fglaser"/>
          <tosca:InputParameter name="keystone_url" defaultValue="http://controller:35357/v3"/>
          <tosca:InputParameter name="region" defaultValue="RegionOne"/>
          <tosca:InputParameter name="agent_configuration" defaultValue="{user: ubuntu, key: ~/.ssh/mongoscale-key.pem, install_method: remote}"/>
          <tosca:InputParameter name="keystone_tenant_name" defaultValue="mongoscale"/>
          <tosca:InputParameter name="num_replicas" defaultValue="3"/>
          <tosca:InputParameter name="num_shards" defaultValue="2"/>
          <tosca:InputParameter name="vm_flavor" defaultValue="36637a26-fded-4635-b6c5-ec8ec0745eab"/>
        </tosca:InputParameters>
        <tosca:OutputParameters>
          <tosca:OutputParameter name="ip" type="" defaultValue="" value="{ get_attribute: [swe.simpaas.instances.floating_ip, floating_ip_address] }"/>
        </tosca:OutputParameters>
      </tosca:Plan>
    </tosca:Plans>
  </tosca:ServiceTemplate>
</tosca:Definitions>