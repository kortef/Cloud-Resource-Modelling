var targetmodels = new Set();
var matchedmodels = new Set();

targetmodels.add(batchmodel);
targetmodels.add(cloudmodel);

var matchings = new Map();
matchings.put(batchmodel.name, new Map());
matchings.put(cloudmodel.name, new Map());

// loop over all target models
for (m in targetmodels){
	("Matching against targetmodel " + m.name + ".").println(); 
	
	var requirements = atemplate!TRequirement.allInstances();
	
	// loop over all requirements
	for (requirement in atemplate!TRequirement.allInstances()){
		("Looking for match for requirement " + requirement.name + ".").println();
		("Type name is " + requirement.type + ".").println();
		
		var type = atype!TRequirementType.allInstances().selectOne(t | t.name == requirement.type.toString());
		var requiredCapabilityType = type.requiredCapabilityType;
		
		// find one matching capability in target model
		var capabilities = m!TCapability.allInstances().select(c | c.type == requiredCapabilityType );
		var capability = null;
		
		if (capabilities.size() > 1){
			capability = System.user.choose("Multiple capabilities in target model " + m.name + " fullfill requirements, please choose appropriate: ", capabilities);
			
		} else if (capabilities.size == 1){
			capability = capabilities.get(0);
		}
		
		if  (capability.isDefined()){
			("Found type match in " + capability.eContainer.eContainer.name + ".").println();
			
			// now checking if properties map
			if (isMatch(requirement.properties, capability.properties)){
				"Property values match!".println();
				requirements.remove(requirement);
				matchings.get(m.name).put(requirement, capability);
			}
		}
		
		"".println();
	}
	
	if (requirements.size() > 0){
		("=> Model " + m.name + " does not fullfill requirements.").println();
		"".println();	
	}
	else {
		("=> Model " + m.name + " fullfills requirements.").println();
		"".println();
		matchedmodels.add(m);
	}
}
if (matchedmodels.size() == 0){
	("=> No matching resource model found.").println();
}



var choice = null;
if (matchedmodels.size() > 1){
	var options = new Sequence();
	for (m in matchedmodels){
		options.add(m.name);
	}

	choice = System.user.choose("Multiple target models fullfill requirements, please choose appropriate: ", options);
}

if (choice.isDefined()){
	("User selection: " + choice + ".").println();
}

if (choice == batchmodel.name){
	/*var topology = relationshipmodel!TTopologyTemplate.getAllInstances().get(0);
 	/*for (req in matchings.get(batchmodel.name).keySet){
 		var relationship = new relationshipmodel!TRelationshipTemplate();
 		var sourceElement = new relationshipmodel!SourceElementType();
 		var targetElement = new relationshipmodel!TargetElementType();
 		sourceElement.ref = req.name;
 		targetElement.ref = matchings.get(batchmodel.name).get(req).name;
 		relationship.sourceElement = sourceElement;
 		relationship.targetElement = targetElement;	
 		topology.relationshipTemplate.add(relationship);
 		
 	}*/
 	
 	
}

// Check if requirement properties and capability properties match
operation isMatch(rproperties, cproperties): Boolean{
	if (rproperties.isDefined() and cproperties.isDefined()){
			// using reflective API to be able to compare all kinds or properties
			var eAttributes = rproperties.any.get(0).value.eClass.getEAllAttributes();
			var rproperty = rproperties.any.get(0).value;
			var cproperty = cproperties.any.get(0).value;
			
			for (attribute in eAttributes){
				var name = attribute.name;
				var match = cproperty.eClass.getEStructuralFeature(name);
				if (match.isDefined()){
					("Matched properties with name " + name + ".").println();
					if (rproperty.eGet(attribute) == cproperty.eGet(match)){
						"Values are matching".println();
					}
					else {
						return false;
					}
				} else {
					return false;
				}
			}
		}
	else {
		return false;
	}

	return true;
}