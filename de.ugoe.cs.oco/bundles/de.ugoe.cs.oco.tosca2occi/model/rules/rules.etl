import "./../operations/generalOperations.etl";

@greedy
rule NodeTemplate2Resource
	transform nodeTemplate : TOSCA!TNodeTemplate
	to resource : OCCI!occi::Resource{ 
	guard: (configuration.get(nodeTemplate.type.localPart) <> null)
	
	resource.id = nodeTemplate.id;	
	resource.title = nodeTemplate.name;
	resource.summary = nodeTemplate.getDescription();
	resource.assignKind(nodeTemplate);
	resource.setLinks(nodeTemplate);
	config.resources.add(resource);
}

@greedy
rule NodeTemplate2MixinAndAttributeStates
	transform nodeTemplate : TOSCA!TNodeTemplate
	to mixinBase : OCCI!occi::MixinBase{ 
	guard: ((mixinMapping.get(nodeTemplate.type.localPart) <> null))
	
	for (mixinName in mixinMapping.get(nodeTemplate.type.localPart)){
		var mixin = OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name = mixinName);
		if (mixin.isDefined()){
			mixinBase.setMixin(mixin);
			var resource = OCCI!occi::Resource.allInstances.selectOne(r | r.id =  nodeTemplate.id);
			resource.setAttributeStates(nodeTemplate);
			resource.getParts().add(mixinBase);
		}
	}
}

@greedy
rule RelationshipTemplate2Link
	transform relTemplate : TOSCA!TRelationshipTemplate
	to link : OCCI!occi::Link{ 
	guard: (configuration.get(relTemplate.type.localPart) <> null)
	
	link.id = relTemplate.id;	
	link.title = relTemplate.name;
	link.assignKind(relTemplate);
	
	var target = relTemplate.targetElement.ref;
	
	var targetNodeTemplate = target.econtainer.econtainer;
	var sourceNodeTemplate = relTemplate.sourceElement.ref.econtainer.econtainer;
	
	if (targetNodeTemplate.isKindOf(TOSCA!Server) and relTemplate.isKindOf(TOSCA!HostedOn)){
		//"Found target of type Server.".println();
		link.kind = OCCI!occi::Kind.allInstances.selectOne(k | k.term == "placementlink");
		sourceNodeTemplate.createPlacementLinkForIncomings(target.econtainer.econtainer.id);
	}
	
	var targetResource = OCCI!occi::Resource.allInstances.selectOne(r | r.id == target.econtainer.econtainer.id);
	link.target = targetResource;
	
	if(link.target == null){
			//"Target Resource is not part of model".println();
			if(targetsToBeAdded.containsKey(target.econtainer.econtainer.id)){
				targetsToBeAdded.get(target.econtainer.econtainer.id).add(link);	
			}
			else{
				var bag = new Bag;
				bag.add(link);
				targetsToBeAdded.put(target.econtainer.econtainer.id, bag);
			}
		}
	var sourceRequirement = relTemplate.sourceElement.ref;
	var sourceID = sourceRequirement.econtainer.econtainer.id;
	var sourceResource = OCCI!occi::Resource.allInstances.selectOne(r | r.id = sourceID);
			
	if (sourceResource == null){
		   //("Source Resource " + sourceRequirement.econtainer.econtainer.id + " is not transformed yet").println();
			if(sourcesToBeAdded.containsKey(sourceID)){
				sourcesToBeAdded.get(sourceID).add(link);	
			}
			else{
				var bag = new Bag;
				bag.add(link);
				sourcesToBeAdded.put(sourceID, bag);
			}
	}
	else {
		sourceResource.links.add(link);
	}
	
	if (mixinMapping.get(relTemplate.type.localPart) <> null){
		for (mixinName in mixinMapping.get(relTemplate.type.localPart)){
			var mixinBase = new OCCI!occi::MixinBase();
	    	var mixin = OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name = mixinName);
			if (mixin.isDefined()){
				mixinBase.setMixin(mixin);
				var link = OCCI!occi::Link.allInstances.selectOne(r | r.id =  relTemplate.id);
				link.getParts().add(mixinBase);
			}
		}
	}
}

@greedy
rule Server2FlavorMixin
	transform props : TOSCA!TServerProperties
	to mixinBase: OCCI!occi::MixinBase{
	var mixin = null;
	if (props.numCpus.asInteger() == 1 and props.memory.asInteger() == 1024){
		mixin = OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name == "SWE_Small");
	} else if (props.numCpus.asInteger() == 2 and props.memory.asInteger() == 2048){
		mixin = OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name == "SWE_Medium");
	} else if (props.numCpus.asInteger() == 4 and props.memory.asInteger() == 4096){
		mixin = OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name == "SWE_Large");
	} else if (props.numCpus.asInteger() == 1 and props.memory.asInteger() == 4096){
		mixin = OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name == "SWE_Mem_Small");
	} else if (props.numCpus.asInteger() == 2 and props.memory.asInteger() == 8192){
		mixin = OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name == "SWE_Mem_Medium");
	} else if (props.numCpus.asInteger() == 4 and props.memory.asInteger() == 16384){
		mixin = OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name == "SWE_Mem_Large");
	} 
	mixinBase.setMixin(mixin);
	var resource = OCCI!occi::Resource.allInstances.selectOne(r | r.id =  props.econtainer.econtainer.id);
	if (resource <> null and mixin <> null)
		resource.parts.add(mixinBase);
}

@greedy
rule Volume2StorageSize
   transform props : TOSCA!TVolumeProperties
   to attributeState: OCCI!occi::AttributeState{
   		attributeState.name = "occi.storage.size";
   		attributeState.value = props.size.toString();
   		var resource = OCCI!occi::Resource.allInstances.selectOne(r | r.id =  props.econtainer.econtainer.id);
   		if (resource <> null)
   			resource.attributes.add(attributeState);
   }

//@greedy
//rule OperatingSystem2ImageMixin
//	transform operatingSystem : TOSCA!OperatingSystem
//	to mixinBase: OCCI!occi::MixinBase{
//	mixinBase.setMixin(OCCIExtensions!occi::Mixin.allInstances.selectOne(m | m.name == "Ubuntu_XenialXerus"));
//	for (requirement in operatingSystem.requirements.requirement){
//		var r = TOSCA!TRelationshipTemplate.allInstances.selectOne(r | r.sourceElement.ref == requirement);
//		var c = r.targetElement.ref;
//		c.println();
//		var resource = OCCI!occi::Resource.allInstances.selectOne(r | r.id = c.econtainer.econtainer.id);
//		resource.parts.add(mixinBase);	
//	}
//}
