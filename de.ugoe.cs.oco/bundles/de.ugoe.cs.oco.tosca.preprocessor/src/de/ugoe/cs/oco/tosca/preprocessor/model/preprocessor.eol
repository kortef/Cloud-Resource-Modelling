var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
var ecoreUtil = emfTool.ecoreUtil;

var groups = TGroupTemplate.allInstances();

// Start with top level groups
for (g in groups ){
	for (member in g.member){
	    var candidates = groups.select(g | g.name == member);
		if (not (candidates.isEmpty)){
			for (candidate in candidates){
				groups.remove(candidate);
			}
		}
	}
}

// We assume there is only one element TDefinitions and one TopologyTemplate  
var serviceTemplate = input!TDefinitions.allInstances.get(0).getServiceTemplate;
var topologyTemplate = serviceTemplate.getTopologyTemplate.get(0);

while (groups.size > 0){	
	for (g in groups){
		var suffix = g.name.split("\\.").last();		
		if (g.getType().toString() == "swe.simpaas.groups.ScalingGroup"){
			var scale = g.properties.econtents.get(0).mixed.get(1).value.mixed.get(1).value.mixed.get(0).value;
			
			// Clone relationships that involve members
			if (scale.contains("get_input")){
				scale = getInputParValue(scale);
			}
			var relations = input!TRelationshipTemplate.all.select(r | g.member.includes(r.sourceElement.ref) 
				 	or g.member.includes(r.targetElement.ref));
		    for (relation in relations){
		    	for (i in Sequence {1 .. scale.asInteger}) {
		    		var targetCloneable = ecoreUtil.copy(relation);
		    		topologyTemplate.getRelationshipTemplate.add(targetCloneable);
		    		if (g.member.includes(relation.sourceElement.ref)){
		    			targetCloneable.sourceElement.ref = relation.sourceElement.ref + "_" + suffix + "_" + i;
		    		}
		    		if (g.member.includes(relation.targetElement.ref)){
		    			targetCloneable.targetElement.ref = relation.targetElement.ref + "_" + suffix + "_" + i;
		    		}
		    	}
		    	ecoreUtil.`delete`(relation);
		    }
			
			// Clone members
			for (member in g.member){
				 var orig = TEntityTemplate.allInstances.selectOne(t | t.name = member);
				 for (i in Sequence {1 .. scale.asInteger}) {
	    			var targetCloneable = ecoreUtil.copy(orig);
	    			if (orig.isTypeOf(TGroupTemplate)){
	    				topologyTemplate.getGroupTemplate().add(targetCloneable);
	    			}
	    			if (orig.isTypeOf(TNodeTemplate)){
	    				topologyTemplate.getNodeTemplate().add(targetCloneable);
	    				if (not (targetCloneable.getInterfaces == null)){
							for (interface in targetCloneable.getInterfaces.interface){
								for (op in interface.getOperation){
									if (not (op.getInputParameters == null)){
										for (parameter in op.getInputParameters.inputParameter){
											for (member in g.member){
												if (member.isSubstringOf(parameter.value)){
													parameter.value = parameter.value.replace(member, member + "_" + suffix + "_" + i);
												}
											}
										}
									}
								}
							} 
						}   				
	    			}
	    			targetCloneable.name = orig.name + "_" + suffix + "_" + i;	
	  			 }
	  			ecoreUtil.`delete`(orig);
			}		
		}
		var test = ecoreUtil.`delete`(g);
	}
	groups.removeAll(groups);
	groups.addAll(topologyTemplate.getGroupTemplate());	
}

operation getInputParValue(request: String): String{
	var requiredInputPar = request.split(" ").get(1);
	requiredInputPar = requiredInputPar.substring(0, requiredInputPar.length - 1);
	//("Looking for parameter: " + requiredInputPar).println();
	var inputPar = input!TPlan.allInstances.get(0).
		inputParameters.inputParameter.selectOne(p | p.name == requiredInputPar);
	return inputPar.value;
}