tosca_definitions_version: tosca_simple_yaml_1_0
[% var template: ServiceTemplate;
var ident = "";
var gap = "  ";
template = input!ServiceTemplate.allInstances.at(0);
if (template.description.isDefined){
	toString(template.description, ident);
}

if (template.topologyTemplate.isDefined){
	out.println("topology_template:");
}
var topology: TopologyTemplate;
topology = template.topologyTemplate;
if (not topology.inputs.isEmpty){
	ident = ident + gap;
	out.println(ident + "inputs:");
	ident = ident + gap;
	for (input in topology.inputs){
		toString(input, ident, gap);
	}
	ident = ident.substring(0, ident.length - 4);
	out.println();
}

if (not topology.nodeTemplates.isEmpty){
	ident = ident + gap;
	out.println(ident + "node_templates:");
	ident = ident + gap;
	for (node in topology.nodeTemplates){
		toString(node, ident, gap);
	}
	ident = ident.substring(0, ident.length - 4);
	out.println();
}

if (not topology.outputs.isEmpty){
	ident = ident + gap;
	out.println(ident + "outputs:");
	ident = ident + gap;
	for (output in topology.outputs){
		toString(output, ident, gap);
	}
	ident = ident.substring(0, ident.length - 4);
	out.println();
}

operation toString(parameter: Parameter, ident: String, gap: String){
	out.println(ident + parameter.name + ": ");
	ident = ident + gap;
	if (not (parameter.type == null)){
		out.println(ident + "type: " +  parameter.type);
	}
	if (not (parameter.description == null)){
		toString(parameter.description, ident);
	}
	if (not parameter.constraints.isEmpty){
		out.println(ident + "constraints: ");
		ident = ident + gap;
		for (constraint in parameter.constraints){
			toString(constraint, ident, gap);
		}
	}
	if (not (parameter.value == null)){
		out.println(ident + "value: " + parameter.value);
	}
}

operation toString(constraint: ConstraintClause, ident: String, gap: String){
	out.print(ident + "- " + constraint.operator.literal + ":");
	out.println(constraint.value);
}

operation toString(node: NodeTemplate, ident: String, gap: String){
	out.println(ident + node.name + ":");
	ident = ident + gap;
	out.println(ident + "type: " + node.type.name);
	if (not (node.description == null)){
		toString(node.description, ident);
	}
	ident = ident.substring(0, ident.length - 2);
	if (not node.properties.isEmpty){
		ident = ident + gap;
		out.println(ident + "properties:");
		ident = ident + gap;
		for (property in node.properties){
			toString(property, ident);
		}
		ident = ident.substring(0, ident.length - 4);
	}
	if (not node.requirements.isEmpty){
		ident = ident + gap;
		out.println(ident + "requirements:");
		ident = ident + gap;
		for (requirement in node.requirements){
			toString(requirement, ident, gap);
		}
		ident = ident.substring(0, ident.length - 4);
	}
	
	if (not node.capabilities.isEmpty){
		ident = ident + gap;
		out.println(ident + "capabilities:");
		ident = ident + gap;
		for (capability in node.capabilities){
			toString(capability, ident, gap);
		}
		ident = ident.substring(0, ident.length - 4);
	}
	
	if (not node.interfaces.isEmpty){
		ident = ident + gap;
		out.println(ident + "interfaces:");
		ident = ident + gap;
		for (interface in node.interfaces){
			toString(interface, ident, gap);
		}
		ident = ident.substring(0, ident.length - 4);
	}
	
	if (not node.artifacts.isEmpty){
		ident = ident + gap;
		out.println(ident + "artifacts:");
		ident = ident + gap;
		for (artifact in node.artifacts){
			toString(artifact, ident, gap);
		}
		ident = ident.substring(0, ident.length - 4);
	}
	
}

operation toString(capability: CapabilityAssignment, ident: String, gap: String){
	out.println(ident + capability.name + ":");
	if (not capability.properties.isEmpty){
		ident = ident + gap;
		out.println(ident + "properties:");
		ident = ident + gap;
		for (property in capability.properties){
			toString(property, ident);
		}
	}
}

operation toString(interface: Interface, ident: String, gap: String){
	out.println(ident + interface.name + ":");
	if (not interface.inputs.isEmpty){
		ident = ident + gap;
		out.println(ident + "inputs:");
		ident = ident + gap;
		for (property in interface.properties){
			toString(property, ident);
		}
	}
	if (not interface.operations.isEmpty){
		ident = ident + gap;
		for (op in interface.operations){
			toString(op, ident, gap);
		}
	}
}

operation toString(artifact: Artifact, ident: String, gap: String){
	// only able to print short notation so far
	if (artifact.type == null){
		out.println(ident + artifact.name + ": " + artifact.file);
	} else {
		out.println(ident + artifact.name + ": ");
		ident = ident + gap;
		if (not (artifact.description == null)){
			out.println(ident + "description: " + artifact.description.value);
		}
		out.println(ident + "type: " + artifact.type.name);
		out.println(ident + "file: " + artifact.file);
		if (not (artifact.repository == null)){
			out.println(ident + "repository: " + artifact.repository);
		}
		if (not (artifact.deployPath == null)){
			out.println(ident + "deploy_path: " + artifact.deployPath);
		}
	}
	
}

operation toString(op: Operation, ident: String, gap: String){
	// Only able to print first extended and short notation so far
	if (op.inputs.isEmpty){
		out.println(ident + op.name + ": " + op.implementation);
	} else {
		out.println(ident + op.name + ": " );
		ident = ident + gap;
		if (not (op.description == null)){
			out.println(ident + "description: " + op.description.value);
		}
		out.println(ident + "implementation: " + op.implementation);
		out.println(ident + "inputs:");
		ident = ident + gap;
		for (input in op.inputs){
			toString(input, ident);
		}
	}
}

operation toString(requirement: RequirementAssignment, ident: String, gap: String){
	// Only able to print short notation so far...
	if (not (requirement.node == null)){
		out.println(ident + "- " + requirement.name  + ": " + requirement.node.name);
	}
}

operation toString(description: Description, ident: String){
	out.println(ident + "description: " + description.value);
}

operation toString(assignment: PropertyAssignment, ident: String){
	out.println(ident + assignment.name + ": " + assignment.value);
}


%]