/* Operation: createRootExtensions
Description: Creates required Extensions for the OCCI2TOSCA transformation. One for nodeTypes and one for relationshipTypes.*/
operation createRootExtensions() {
	var core = new Set;
	//core.add(Core!Extension.all.selectOne(element|element.name = "core"));
	for(extension in OCCI!Extension){
		core.add(extension);
	}
		
	//createExtension("nodeTypes", TOSCA!TDefinitions.all.first().targetNamespace + "/TNodeType#", "Transformed TOSCA Node Types", core);
	//createExtension("relationshipTypes", TOSCA!TDefinitions.all.first().targetNamespace + "/TRelationshipType#", "Transformed TOSCA Relationship Types", core);
}

operation createRootConfiguration(){
	var config = new OCCI!Configuration;
	return config;
}

/*


*/
operation createConfigurationExtensions() {
	var imp = new Set;	
	for(value in configuration.values()){
		if(not(OCCI!Extension.all.exists(extension| extension.scheme == value.scheme))){
			createExtension("configuration", value.scheme, "Configured Kinds", imp);
		}
	}
}


/*




*/
operation addKindsToConfiguredExtensions(){
	for(value in configuration.values()){
		OCCI!Extension.all.selectOne(extension| extension.scheme == value.scheme).kinds.add(value);
	}
}

/* Operation: createExtension
Input: Name, scheme, description and imports of the OCCI Extension to be created.
Description: Creates extension in the OCCI model based on the input parameters.*/
operation createExtension(name : String, scheme : String, description : String, imports : Set) {
	var extension = new OCCI!Extension;
	extension.name = name;
	extension.scheme = scheme;
	extension.description = description;
	for(`import` in imports) {
		if(`import`.isTypeOf(OCCI!Extension)) {
			extension.`import`.add(`import`);
		}
	}
}


/* Operation: addToNodeTypeExtension
Input: namespace = targetNamespace of a NodeType
Description: Depending on the targetNamespace of the NodeType from which the kind is created, it is added to the correct Extension.
If the "correct" Extension does not exist at that point in time, it gets created.*/
operation OCCI!Kind addToNodeTypeExtension(namespace : String) {
	var defaultNamespace = TOSCA!TDefinitions.all.first().targetNamespace;

	if(namespace == null or namespace == defaultNamespace) {
			OCCI!Extension.all.selectOne(extension|extension.name = "nodeTypes" and extension.scheme = defaultNamespace + "/TNodeType#").kinds.add(self);
	}
	else  {
		if(OCCI!Extension.all.exists(extension|extension.name = "nodeTypes" and extension.scheme = namespace + "/TNodeType#") == false){
			var imports = new Set;
			imports.add(Core!Extension.all.selectOne(element|element.name = "core"));
			imports.add(OCCI!Extension.all.selectOne(extension|extension.name = "nodeTypes" and extension.scheme = defaultNamespace + "/TNodeType#"));
				
				if(".".isSubstringOf(namespace)){
					createExtension(namespace.split("([.])").second() + " nodeTypes", namespace + "/TNodeType#", "Transformed TOSCA Node Types with a non root targetNamespace", imports);
					OCCI!Extension.all.selectOne(extension|extension.name = namespace.split("([.])").second() + " nodeTypes" and extension.scheme = namespace + "/TNodeType#").kinds.add(self);
				}
				else{
					createExtension(namespace + " nodeTypes", namespace + "/TNodeType#", "Transformed TOSCA Node Types with a non root targetNamespace", imports);
					OCCI!Extension.all.selectOne(extension|extension.name = namespace + " nodeTypes" and extension.scheme = namespace + "/TNodeType#").kinds.add(self);	
				}	
			}
		}
}

/* Operation: addToRelationshipTypeExtension
Input: namespace = targetNamespace of a NodeType
Description: Depending on the targetNamespace of the NodeType from which the kind is created, it is added to the correct Extension.
If the "correct" Extension does not exist at that point in time, it gets created.*/
operation OCCI!Kind addToRelationshipTypeExtension(namespace : String) {
	var defaultNamespace = TOSCA!TDefinitions.all.first().targetNamespace;

	if(namespace == null or namespace == defaultNamespace) {
			OCCI!Extension.all.selectOne(extension|extension.name = "relationshipTypes" and extension.scheme = defaultNamespace + "/TRelationshipType#").kinds.add(self);
	}
	else  {
		if(OCCI!Extension.all.exists(extension|extension.name = "relationshipTypes" and extension.scheme = namespace + "/TRelationshipType#") == false){
			var imports = new Set;
			imports.add(Core!Extension.all.selectOne(element|element.name = "core"));
			imports.add(OCCI!Extension.all.selectOne(extension|extension.name = "relationshipTypes" and extension.scheme = defaultNamespace + "/TRelationshipType#"));
				
				if(".".isSubstringOf(namespace)){
					createExtension(namespace.split("([.])").second() + " relationshipTypes", namespace + "/TRelationshipType#", "Transformed TOSCA Node Types with a non root targetNamespace", imports);
					OCCI!Extension.all.selectOne(extension|extension.name = namespace.split("([.])").second() + " relationshipTypes" and extension.scheme = namespace + "/TRelationshipType#").kinds.add(self);
				}
				else{
					createExtension(namespace + " relationshipTypes", namespace + "/TRelationshipType#", "Transformed TOSCA Node Types with a non root targetNamespace", imports);
					OCCI!Extension.all.selectOne(extension|extension.name = namespace + " relationshipTypes" and extension.scheme = namespace + "/TRelationshipType#").kinds.add(self);	
				}	
			}
		}
}
