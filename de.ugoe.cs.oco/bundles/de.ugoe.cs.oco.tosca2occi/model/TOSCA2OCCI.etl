import "./configuration.etl";
import "./operations/generalOperations.etl";
import "./operations/attributes.etl";
import "./operations/configurations.etl";
import "./operations/kinds.etl";
import "./operations/links.etl";
import "./rules/rules.etl";



pre {
	var targetsToBeAdded = new Map; //Key = Target Resource id; Value = Link;
	var sourcesToBeAdded = new Map; //Key = Sources Resource id; Value = Link;
	var configuration = getTypeMapping();
	var mixinMapping = getMixinMapping();

	"Starting ETL".println();
	"Starting Transformation".println();
	"\n".print();
	
	"Setting parameters ...".println();
	if (TOSCA!PropertyMappingsType.allInstances.size() > 0){
		var propertyMappingsType = TOSCA!PropertyMappingsType.allInstances.get(0);
		var properties = propertyMappingsType.eContainer.any.get(0).getValue();
		for (mapping in propertyMappingsType.propertyMapping){
			var entityTemplate = mapping.targetObjectRef;
			(mapping.serviceTemplatePropertyRef + " --> " + entityTemplate.name + ":" + mapping.targetPropertyRef).println();
			var targetProperties = entityTemplate.properties.any.get(0).getValue();
			var targetFeature = targetProperties.eClass.getEstructuralFeature(mapping.targetPropertyRef);
			var sourceFeature = properties.eClass.getEstructuralFeature(mapping.serviceTemplatePropertyRef);
			var value = properties.eGet(sourceFeature);
			targetProperties.eSet(targetFeature, value);
		}
	}

	
	"".println();
	"TOSCA model stats (before Group Resolution):".println();
	("#TNodeTemplates to be transformed: " + TOSCA!TNodeTemplate.allOfKind.size).println();
	("#TRelationshipTemplates to be transformed: " + TOSCA!TRelationshipTemplate.allOfKind.size).println();
	("#TGroupTemplates to be transformed: " + TOSCA!TGroupTemplate.allOfKind.size).println();
	var template = TOSCA!TTopologyTemplate.allInstances().get(0);	
	
	"".println();
	"Inflating Groups ... ".println();
	var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
	var ecoreUtil = emfTool.ecoreUtil;
	for (g in TOSCA!TGroupTemplate.allOfKind){
		var properties = g.properties.any.get(0).getValue();
		var scale = properties.instances;
	
		for (i in Sequence {2 .. scale.asInteger()}) {
			var clones = new Map();
			for (member in g.member){
	    		var clone = ecoreUtil.copy(member);
	    		clone.eSet(clone.eClass().getEStructuralFeature("name"), 
	    			member.eGet(member.eClass().getEStructuralFeature("name")) + i);
	    		clone.eSet(clone.eClass().getEStructuralFeature("id"), 
	    		    "urn:uuid:" + ecoreUtil.generateUUID());
	    		template.nodeTemplate.add(clone);
	    		clones.put(member, clone);		
	  	    }
	  	    
	  	    var relations = TOSCA!TRelationshipTemplate.all.select(r | 
	  	    		   g.member.includes(r.sourceElement.ref.eContainer.eContainer) or
	  	    		   g.member.includes(r.targetElement.ref.eContainer.eContainer));
		    
		    for (relation in relations){
		    		var relClone = ecoreUtil.copy(relation);
		    		relClone.eSet(relClone.eClass().getEStructuralFeature("name"), 
	    				relation.eGet(relation.eClass().getEStructuralFeature("name")) + i);
	    			
	    			relClone.eSet(relClone.eClass().getEStructuralFeature("id"), 
	    		    	"urn:uuid:" + ecoreUtil.generateUUID());
		    		
		    		if (g.member.includes(relation.sourceElement.ref.eContainer.eContainer)){
		    			var clonedNode = clones.get(relation.sourceElement.ref.eContainer.eContainer);
		    			var reqName = relation.sourceElement.ref.name;
		    			var clonedReqDef = clonedNode.eGet(clonedNode.eClass().getEStructuralFeature("requirements"));
		    			var clonedReqs = clonedReqDef.eGet(clonedReqDef.eClass().getEStructuralFeature("requirement"));
		    			for (req in clonedReqs){
		    				req.eSet(req.eClass().getEStructuralFeature("id"), 
	    		    			"urn:uuid:" + ecoreUtil.generateUUID());
		    				if (req.eGet(req.eClass().getEStructuralFeature("name")) == reqName){
		    					var clonedSourceElement = relClone.eGet(relClone.eClass().getEStructuralFeature("sourceElement"));
		    					clonedSourceElement.eSet(clonedSourceElement.eClass.getEstructuralFeature("ref"), req);
		    				}
		    			}
		    		}
		    		if (g.member.includes(relation.targetElement.ref.eContainer.eContainer)){
		    			var clonedNode = clones.get(relation.targetElement.ref.eContainer.eContainer);
		    			var capName = relation.targetElement.ref.name;
		    			var clonedCapDef = clonedNode.eGet(clonedNode.eClass().getEStructuralFeature("capabilities"));
		    			var clonedCaps = clonedCapDef.eGet(clonedCapDef.eClass().getEStructuralFeature("capability"));
		    			for (cap in clonedCaps){
		    				cap.eSet(cap.eClass().getEStructuralFeature("id"), 
	    		    			"urn:uuid:" + ecoreUtil.generateUUID());
		    				if (cap.eGet(cap.eClass().getEStructuralFeature("name")) == capName){
		    					var clonedTargetElement = relClone.eGet(relClone.eClass().getEStructuralFeature("targetElement"));
		    					clonedTargetElement.eSet(clonedTargetElement.eClass.getEstructuralFeature("ref"), cap);
		    				}
		    			}
		    		}
		    		template.relationshipTemplate.add(relClone);
		    }
		}
	}
	
	"TOSCA model stats (after Group Resolution):".println();
	("#TNodeTemplates to be transformed: " + TOSCA!TNodeTemplate.allOfKind.size).println();
	("#TRelationshipTemplates to be transformed: " + TOSCA!TRelationshipTemplate.allOfKind.size).println();	
	
	"".println;
	"OCCI model stats:".println();
	("#Kinds (known): " + OCCIExtensions!occi::Kind.allInstances.size).println();
	("#Extensions (known): " + OCCIExtensions!occi::Extension.allInstances.size).println();
	("#Mixins (known):) " + OCCIExtensions!occi::Mixin.allInstances.size).println();

	var config = createRootConfiguration();
	
	for (extension in OCCIExtensions!occi::Extension.allInstances){
		config.use.add(extension);
	}
	
	"".println();
	"Transforming model ... ".println();
	"".println();	
}
post {
	("#Resources in output model: " + OCCI!occi::Resource.allInstances.size).println();
	("#Links in output model: " + OCCI!occi::Link.allInstances.size).println();
	
	
	// Add top-level application in case there is none
	var applicationKind = OCCI!occi::Kind.allInstances.selectOne(kind | 
		kind.scheme == "http://schemas.modmacao.org/occi/platform#" and kind.title == "Application");
	var linkKind = OCCI!occi::Kind.allInstances.selectOne(kind | 
		kind.scheme == "http://schemas.modmacao.org/occi/platform#" and kind.title == "ComponentLink");
			
	var application = OCCI!occi::Resource.allInstances.selectOne( r | r.kind == applicationKind);
	
	if (application == null){
		application = new OCCI!occi::Resource();
		application.kind = applicationKind;
		application.title = "User application";
		var components = OCCI!occi::Resource.allInstances.select(r | 
			r.kind.scheme == "http://schemas.modmacao.org/occi/platform#" and r.kind.title == "Component");	
		for (component in components){
			var componentLink = new OCCI!occi::Link();
			componentLink.target = component;
			componentLink.kind = linkKind;
			componentLink.title = "application_to_" + component.title;
			application.links.add(componentLink);
		}
		config.resources.add(application);
	} 
	
	
	for (link in targetsToBeAdded.values().flatten()){
		delete link;
	}
	for (link in sourcesToBeAdded.values().flatten()){
		delete link;
	}
}
