/* Operation: getConfiguration
Description: Configuration File to Map pre existing types to names, which has to be checked for.*/
operation getTypeMapping() : Map {
	var configuration = new Map;
	
	/* SugarCRM transformation configuration */
    configuration.put("SugarCRMApplication", "component");
	configuration.put("SugarCRMDatabase", "component");
	
	/* OpenFOAM transformation configuration */
	//configuration.put("CloudServer", "compute");
	//configuration.put("Volume", "volume");
	//configuration.put("MPIWorker", "component");
	//configuration.put("Gateway", "component");
	
	/* TOSCA Base Types and Specific Types transformation configuration */
	//configuration.put("RootNodeType", "");
	//configuration.put("Tier", "");
	//configuration.put("SingleNodeTier", "");
	//configuration.put("ScalableTier", "");
	
	configuration.put("Server", "compute");
	//configuration.put("OperatingSystem", "");
	configuration.put("WebServer", "component");
	configuration.put("WebApplication", "component");
	configuration.put("DBMS", "dbms");
	configuration.put("Database", "database");
	configuration.put("ApacheWebServer", "component");
	configuration.put("ApacheWebApplication", "component");
	configuration.put("ApacheModule", "component");
	configuration.put("ApachePHPModule", "component");
	configuration.put("MySQL", "component");
	configuration.put("MySQLDatabase", "component");
	configuration.put("SugarCRMDatabaseConnection", "componentlink");
	configuration.put("RootRelationshipType", "link");
	configuration.put("HostedOn", "componentlink");
	configuration.put("DependsOn", "componentlink");
	configuration.put("ConnectsTo", "networkinterface");
	configuration.put("MySQLDatabaseHostedOnMySQL", "componentlink");
	configuration.put("MySQLDatabaseConnection", "componentlink");
	
	
	return configuration;
}

operation getMixinMapping(): Map {
	var mixinMapping = new Map;
	var seq = new Sequence;
	seq.add("SugarCRMApplication");
	mixinMapping.put("SugarCRMApplication", seq);
	
	seq = new Sequence;
	seq.add("SugarCRMDatabase");
	mixinMapping.put("SugarCRMDatabase", seq);
	//mixinMapping.put("Tier", "");
	//mixinMapping.put("SingleNodeTier", "SingleNodeTier");
	//mixinMapping.put("ScalableTier", "");
	//mixinMapping.put("Server", "comadde");
	//mixinMapping.put("OperatingSystem", "");
	
	seq = new Sequence;
	seq.add("WebServer");
	mixinMapping.put("WebServer", seq);
	
	seq = new Sequence;
	seq.add("WebApplication");
	mixinMapping.put("WebApplication", seq);
	
	seq = new Sequence;
	seq.add("DBMS");
	mixinMapping.put("DBMS", seq);
	
	seq = new Sequence;
	seq.add("Database");
	mixinMapping.put("Database", seq);
	
	seq = new Sequence;
	seq.add("ApacheWebServer");
	mixinMapping.put("ApacheWebServer", seq);
	
	seq = new Sequence;
	seq.add("ApacheWebApplication");
	mixinMapping.put("ApacheWebApplication", seq);
	
	seq = new Sequence;
	seq.add("ApacheModule");
	mixinMapping.put("ApacheModule", seq);
	
	seq = new Sequence;
	seq.add("ApachePHPModule");
	mixinMapping.put("ApachePHPModule", seq);
	
	seq = new Sequence;
	seq.add("MySQL");
	mixinMapping.put("MySQL", seq);
	
	seq = new Sequence;
	seq.add("MySQLDatabase");
	mixinMapping.put("MySQLDatabase", seq);
	
	seq = new Sequence;
	seq.add("ExecutionDependency");
	seq.add("InstallationDependency");
	seq.add("SugarCRMDatabaseConnection");
	mixinMapping.put("SugarCRMDatabaseConnection", seq);
	//mixinMapping.put("RootRelationshipType", "link");
	
	seq = new Sequence;
	seq.add("ExecutionDependency");
	seq.add("InstallationDependency");
	mixinMapping.put("HostedOn", seq);
	
	seq = new Sequence;
	seq.add("ExecutionDependency");
	seq.add("InstallationDependency");
	mixinMapping.put("DependsOn", seq);
	//mixinMapping.put("ConnectsTo", "NetworkInterface");
	
	seq = new Sequence;
	seq.add("ExecutionDependency");
	seq.add("MySQLDatabaseHostedOnMySQL");
	mixinMapping.put("MySQLDatabaseHostedOnMySQL", seq);
	
	seq = new Sequence;
	seq.add("ExecutionDependency");
	seq.add("MySQLDatabaseConnection");
	mixinMapping.put("MySQLDatabaseConnection", seq);
	
	return mixinMapping; 
}