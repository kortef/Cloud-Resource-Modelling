/*Operation: cFlow
Description: Simple creation of an control flow.*/
operation cFlow(source : UML!ActivityNode, target : UML!ActivityNode, activity : UML!Activity){
	var cFlow = new UML!ControlFlow;
	cFlow.source = source;
	cFlow.target = target;
	cFlow.activity = activity;
}

/*Operation: joinIn
Description: Joins every vertex equivalent in the Set to the passed join node.*/
operation Set joinIn(join : UML!JoinNode){
	for(requiredVertex in self){
		cFlow(requiredVertex.equivalent(), join , activity);
	}
}

/*Operation: multipleFlowsToFork
Description: Exchanges multiple outgoing edges of an action by a fork.*/
operation UML!ActivityNode multipleFlowsToFork() {
	var fork = new UML!ForkNode;
	//fork.activity = activity;
	activity.ownedNode.add(fork);
	var tmpEdges = new Set;
	for(outgoing in self.outgoing){
		tmpEdges.add(outgoing);
	}
	for(edge in tmpEdges){
		edge.source = fork;
	}
	cFlow(self, fork, activity);
}



/*configureInitialElements
Description: Performs intial setup of multiple Elements to
make the model more accessable. Mainly to save space in the Main ETL.*/
operation configureInitialElements() {
	var overallModel = new UML!Model;
	var initial = new UML!InitialNode;	
	var final = new UML!ActivityFinalNode;
	overallModel.name = "DeploymentPlan";
	activity.name = "DeploymentWorkflow";	
	initial.name = "initial";
	//initial.activity = activity;
	activity.ownedNode.add(initial);
	final.name = "final";
	//final.activity = activity;
	activity.ownedNode.add(final);
	initialFork.name = "initialFork";
	//initialFork.activity = activity;
	activity.ownedNode.add(initialFork);
	finalJoin.name = "finalJoin";
	//finalJoin.activity = activity;
	activity.ownedNode.add(finalJoin);
	overallModel.packagedElement.add(activity);
	cFlow(initial, initialFork, activity);
	cFlow(finalJoin, final, activity);
}