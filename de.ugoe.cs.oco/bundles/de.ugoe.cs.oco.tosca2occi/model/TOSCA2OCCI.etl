import "./configuration.etl";
import "./operations/generalOperations.etl";
import "./operations/normative.etl";
import "./operations/attributes.etl";
import "./operations/configurations.etl";
import "./operations/kinds.etl";
import "./operations/links.etl";
import "./rules/rules.etl";



pre {
	"Starting ETL".println();
	"Starting Transformation".println();
	"\n".print();

	var targetsToBeAdded = new Map; //Key = Target Resource id; Value = Link;
	var sourcesToBeAdded = new Map; //Key = Sources Resource id; Value = Link;
	var configuration = getTypeMapping();
	var mixinMapping = getMixinMapping();
	
	"Input model stats:".println();
	("#TNodeTemplates to be transformed: " + TOSCA!TNodeTemplate.allOfKind.size).println();
	("#TRelationshipTemplates to be transformed: " + TOSCA!TRelationshipTemplate.allOfKind.size).println();
	
	"".println;
	"OCCI model stats:".println();
	("#Kinds (known): " + OCCIExtensions!Kind.allInstances.size).println();
	("#Extensions (known): " + OCCIExtensions!Extension.allInstances.size).println();
	("#Mixins (known):) " + OCCIExtensions!Mixin.allInstances.size).println();

	var config = createRootConfiguration();
	
	for (extension in OCCIExtensions!Extension.allInstances){
		config.use.add(extension);
	}
	
}
post {
	("#Resources in output model: " + OCCI!occi::Resource.allInstances.size).println();
	("#Links in output model: " + OCCI!occi::Link.allInstances.size).println();

	// convert ports to network interfaces
	var portKinds = OCCI!occi::Kind.allInstances.selectOne(k | k.term == "tosca.nodes.network.Port");	
	
	if (not (portKinds == null)){
		for (port in portKinds.entities){
			var vm = port.links.selectOne(l | l.title.contains("bindsTo")).target;
			var network = port.links.selectOne(l | l.title.contains("linksTo")).target;
			var link = new OCCI!occi::Link;
			var mixin = Cloudconfig!Mixin.allInstances.selectOne(m | m.term == "ipnetworkinterface");
			link.title = vm.title + "_" + "linksTo" + "_" + network.title;
			//link.id = "linksTo" + network.title;
			for (attribute in port.attributes){
				var newAttribute = new OCCI!AttributeState;
				newAttribute.name = attribute.name;
				newAttribute.value = attribute.value;
				link.attributes.add(newAttribute);
			}
		link.mixins.add(mixin);
		link.target = network;
		vm.links.add(link);
		delete port;
	}
	}
		for (link in targetsToBeAdded.values().flatten()){
			delete link;
	}
		for (link in sourcesToBeAdded.values().flatten()){
			delete link;
	}
}
