import "./generalOperations.etl";

/*Operation: provisionableVertices
Description: Returns a Set of all vertices that are not provisioned yet, but can now
be provisioned. */
operation provisionableVertexes(){
	var provisionable = new Set;
	for(vertex in notProvisioned){
		var requiredVertices = vertex.requiredVertices();
		if(vertex.isProvisionable(requiredVertices)){
			provisionable.add(vertex);
		}
	}
	return provisionable;
}

/*Operation: requiredVertices
Description: A set is returned containing all vertices required to provision the vertex the operation is called on.*/
operation POG!Vertex requiredVertexes() : Set {
	var requiredVertices = new Set;
	for(edge in POG!Edge){
		if(edge.target == self){
			requiredVertices.add(edge.source);
		}
	}
	return requiredVertices;
}

/*Operation: isProvisionable
Description: Checks whether the Vertex is provisionable,
by looking up its required vertices in the notProvisioned Set.*/
operation POG!Vertex isProvisionable(requiredVertices : Set) : Boolean {
	for(vertex in requiredVertices) {
		if(not(notProvisioned.exists(vertex | vertex == requiredVertices))){
			return true;
		}
		else{
			return false;
		}
	}
}